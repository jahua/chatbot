# Build stage
FROM python:3.10-slim as builder

# Add build arguments
ARG OPENAI_API_KEY
ARG OPENAI_API_BASE
ARG OPENAI_MODEL

WORKDIR /app

# Copy requirements first to leverage Docker cache
COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt

# Copy the frontend application
COPY . .

# Final stage
FROM python:3.10-slim

# Add build arguments again for final stage
ARG OPENAI_API_KEY
ARG OPENAI_API_BASE
ARG OPENAI_MODEL

# Set as environment variables
ENV OPENAI_API_KEY=${OPENAI_API_KEY}
ENV OPENAI_API_BASE=${OPENAI_API_BASE}
ENV OPENAI_MODEL=${OPENAI_MODEL}

WORKDIR /app

# Install curl for health checks and gdal-bin for geospatial support
RUN apt-get update && apt-get install -y \
    curl \
    gdal-bin \
    && rm -rf /var/lib/apt/lists/*

# Copy requirements and install them in the final stage
COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt

# Copy application from builder stage
COPY --from=builder /app .

# Create static directory structure
RUN mkdir -p /app/static/geojson/shapes

# Set environment variables
ENV PYTHONUNBUFFERED=1
ENV PYTHONPATH=/app

# Create a health check endpoint file
RUN echo '{"status": "ok"}' > healthz

# Expose the Streamlit port
EXPOSE 8501

# Command to run the Streamlit application
CMD ["streamlit", "run", "app.py", "--server.port=8501", "--server.address=0.0.0.0"] 